{"pageProps":{"article":{"slug":"2019-11-08-ruby-grant","title":"2019年度Rubyアソシエーション開発助成 に採択された","publishedAt":"2019-11-08T00:00:00.000Z","tags":[{"slug":"Ruby","name":"Ruby"}],"thumbnail":null,"ogpImage":"https://nagayamaryoga.github.io/blog/images/2019-11-08-ruby-grant.png","externalUrl":null,"preview":"Rubyアソシエーションが主催する 2019年度Rubyアソシエーション開発助成 に提案プロジェクトが採択されました。\n\n題目は「複数ファイルに対応したプリコンパイル機構の作成」です。\n\nCookpad株式会社でのインターン に参加した際、メンターの方からの勧めがあり応募したところ審査を通過しました。\n\n以下が応募の際に提出した提案の内容です (一部省略)。","sourceBase":"2019-11-08-ruby-grant.md","bodyContent":"Rubyアソシエーションが主催する [2019年度Rubyアソシエーション開発助成](https://www.ruby.or.jp/ja/news/20191031) に提案プロジェクトが採択されました。\n\n題目は「複数ファイルに対応したプリコンパイル機構の作成」です。\n\n[Cookpad株式会社でのインターン](https://nagayamaryoga.github.io/blog/2019-09-18-cookpad-summer-intern-ruby) に参加した際、メンターの方からの勧めがあり応募したところ審査を通過しました。\n\n以下が応募の際に提出した提案の内容です (一部省略)。\n\n> # 応募者名・担当者名\n> 永山 涼雅\n>\n> # 連絡先電子メールアドレス\n> (省略)\n>\n> # 略歴\n> (省略)\n>\n> https://bugs.ruby-lang.org/issues/16163\n>\n> # プロジェクト名\n> 複数ファイルに対応したプリコンパイル機構の作成とRubyインタプリタ起動の高速化\n>\n> # プロジェクトの詳細\n> RubyVMの中間表現である InstructionSequence (ISeq) はバイナリデータの入出力機能を備えている。\n> - 出力: `RubyVM::InstructionSequence#to_binary`\n> - 入力: `RubyVM::InstructionSequence.load_from_binary`\n> これらを用いてRubyスクリプトのコンパイル結果であるISeqをバイナリデータとしてキャッシュすれば、構文解析やコード生成などの処理を省略できる。\n>\n> 実際にRails 5.2以降ではプロジェクトにデフォルトインストールされるgemであるBootsnap\n> (https://github.com/Shopify/bootsnap/) は、\n> 上記の機能を用いてRailsプロジェクトの起動速度の向上に成功している。\n>\n> しかし、Bootsnapが行っているのはあくまで個別の`.rb`ファイル単位でのキャッシュであり、\n> gemもしくはプロジェクトといった複数ファイルからなる単位でキャッシュを作成することはできない。\n> そのため、ファイル間で共通のオブジェクト(例えばシンボルや文字列など)のバイナリ表現の共有などが行えず、\n> 場合によっては内容の重複したオブジェクトが複数生成されることがあった。\n>\n> 複数のスクリプトファイルから単一のバイナリを生成できるように現在のISeqの入出力機能を拡張することで、\n> `object_list` (`#to_binary`内部で用いられているオブジェクトをシリアライズするための機構)\n> を複数スクリプトファイル間で共有することが可能になるため、\n> さらなるバイナリサイズの削減や、ロードの高速化が期待できる。\n>\n> また、Rubyインタプリタが起動時にロードする一部のgem (`rubygems`、`did_you_mean`など) は\n> Bootsnapの初期化前に読み込まれてしまうため原理的にキャッシュできない。\n>\n> 本プロジェクトは、以下の2つの項目の達成を目標とする。\n> 1. 複数ファイルからなるgemやプロジェクトを単一のバイナリファイルにプリコンパイルする機構を提供し、Rubyアプリケーションの起動を高速化する。\n> 2. インタプリタ起動時に読み込まれるgemをプリコンパイルすることでRubyインタプリタ自体> の起動を高速化する。\n>\n> # プロジェクトの成果物\n> 未着手\n\nまた、同じくメンターの方からの勧めで [平成Ruby会議 01](https://heiseirb.github.io/kaigi01/) で対外にインターンの成果発表をすることになりました。\n\n以下、提出したCFPです (一部省略)。\n\n> # 発表タイトル\n>\n> Ruby2.7以降のiseqのバイナリ表現の改善について、Rubyアソシエーション開発助成金2019採択プロジェクトの途中経過について\n>\n> # 発表の概要\n>\n> Ruby2.7に取り込まれたInstructionSequenceのバイナリ表現の改善とその実装について。\n> 上記の概要は以下の記事に公開してしますが、さらに踏み込んでバイナリ表現の形式などについて発表したいと考えています。\n> https://techlife.cookpad.com/entry/2019/09/26/143000\n>\n> また、上記を利用・拡張し、複数のRubyファイルを1つのバイナリにプリコンパイルする機構を作成するプロジェクトがRubyアソシエーション開発助成金2019に採択されたので、そのアプローチや実装についての発表。\n>\n> # この発表を聴いた人が何を持ち帰れるか\n>\n> ・iseqバイナリ表現のデータ構造についての理解\n> ・Ruby2.7のiseqのバイナリ表現にどのような変更があったか、またその影響\n> ・Rails5.2以降で有効になっているBootsnapが(バイナリ表現を用いて)どのようにRailsアプリケーションの高速化を行っているか\n> ・CRuby本体に手を加えるときのノウハウについて\n>\n> # GitHubアカウント\n>\n> NagayamaRyoga\n>\n> # Twitterアカウント\n>\n> (無記入)\n>\n> # ご質問やご要望があればご記入ください\n>\n> (無記入)","bodyHtml":"<p>Rubyアソシエーションが主催する <a href=\"https://www.ruby.or.jp/ja/news/20191031\">2019年度Rubyアソシエーション開発助成</a> に提案プロジェクトが採択されました。</p>\n<p>題目は「複数ファイルに対応したプリコンパイル機構の作成」です。</p>\n<p><a href=\"https://nagayamaryoga.github.io/blog/2019-09-18-cookpad-summer-intern-ruby\">Cookpad株式会社でのインターン</a> に参加した際、メンターの方からの勧めがあり応募したところ審査を通過しました。</p>\n<p>以下が応募の際に提出した提案の内容です (一部省略)。</p>\n<blockquote>\n<h1>応募者名・担当者名</h1>\n<p>永山 涼雅</p>\n<h1>連絡先電子メールアドレス</h1>\n<p>(省略)</p>\n<h1>略歴</h1>\n<p>(省略)</p>\n<p><a href=\"https://bugs.ruby-lang.org/issues/16163\">https://bugs.ruby-lang.org/issues/16163</a></p>\n<h1>プロジェクト名</h1>\n<p>複数ファイルに対応したプリコンパイル機構の作成とRubyインタプリタ起動の高速化</p>\n<h1>プロジェクトの詳細</h1>\n<p>RubyVMの中間表現である InstructionSequence (ISeq) はバイナリデータの入出力機能を備えている。</p>\n<ul>\n<li>出力: <code>RubyVM::InstructionSequence#to_binary</code></li>\n<li>入力: <code>RubyVM::InstructionSequence.load_from_binary</code>\nこれらを用いてRubyスクリプトのコンパイル結果であるISeqをバイナリデータとしてキャッシュすれば、構文解析やコード生成などの処理を省略できる。</li>\n</ul>\n<p>実際にRails 5.2以降ではプロジェクトにデフォルトインストールされるgemであるBootsnap\n(<a href=\"https://github.com/Shopify/bootsnap/\">https://github.com/Shopify/bootsnap/</a>) は、\n上記の機能を用いてRailsプロジェクトの起動速度の向上に成功している。</p>\n<p>しかし、Bootsnapが行っているのはあくまで個別の<code>.rb</code>ファイル単位でのキャッシュであり、\ngemもしくはプロジェクトといった複数ファイルからなる単位でキャッシュを作成することはできない。\nそのため、ファイル間で共通のオブジェクト(例えばシンボルや文字列など)のバイナリ表現の共有などが行えず、\n場合によっては内容の重複したオブジェクトが複数生成されることがあった。</p>\n<p>複数のスクリプトファイルから単一のバイナリを生成できるように現在のISeqの入出力機能を拡張することで、\n<code>object_list</code> (<code>#to_binary</code>内部で用いられているオブジェクトをシリアライズするための機構)\nを複数スクリプトファイル間で共有することが可能になるため、\nさらなるバイナリサイズの削減や、ロードの高速化が期待できる。</p>\n<p>また、Rubyインタプリタが起動時にロードする一部のgem (<code>rubygems</code>、<code>did_you_mean</code>など) は\nBootsnapの初期化前に読み込まれてしまうため原理的にキャッシュできない。</p>\n<p>本プロジェクトは、以下の2つの項目の達成を目標とする。</p>\n<ol>\n<li>複数ファイルからなるgemやプロジェクトを単一のバイナリファイルにプリコンパイルする機構を提供し、Rubyアプリケーションの起動を高速化する。</li>\n<li>インタプリタ起動時に読み込まれるgemをプリコンパイルすることでRubyインタプリタ自体&gt; の起動を高速化する。</li>\n</ol>\n<h1>プロジェクトの成果物</h1>\n<p>未着手</p>\n</blockquote>\n<p>また、同じくメンターの方からの勧めで <a href=\"https://heiseirb.github.io/kaigi01/\">平成Ruby会議 01</a> で対外にインターンの成果発表をすることになりました。</p>\n<p>以下、提出したCFPです (一部省略)。</p>\n<blockquote>\n<h1>発表タイトル</h1>\n<p>Ruby2.7以降のiseqのバイナリ表現の改善について、Rubyアソシエーション開発助成金2019採択プロジェクトの途中経過について</p>\n<h1>発表の概要</h1>\n<p>Ruby2.7に取り込まれたInstructionSequenceのバイナリ表現の改善とその実装について。\n上記の概要は以下の記事に公開してしますが、さらに踏み込んでバイナリ表現の形式などについて発表したいと考えています。\n<a href=\"https://techlife.cookpad.com/entry/2019/09/26/143000\">https://techlife.cookpad.com/entry/2019/09/26/143000</a></p>\n<p>また、上記を利用・拡張し、複数のRubyファイルを1つのバイナリにプリコンパイルする機構を作成するプロジェクトがRubyアソシエーション開発助成金2019に採択されたので、そのアプローチや実装についての発表。</p>\n<h1>この発表を聴いた人が何を持ち帰れるか</h1>\n<p>・iseqバイナリ表現のデータ構造についての理解\n・Ruby2.7のiseqのバイナリ表現にどのような変更があったか、またその影響\n・Rails5.2以降で有効になっているBootsnapが(バイナリ表現を用いて)どのようにRailsアプリケーションの高速化を行っているか\n・CRuby本体に手を加えるときのノウハウについて</p>\n<h1>GitHubアカウント</h1>\n<p>NagayamaRyoga</p>\n<h1>Twitterアカウント</h1>\n<p>(無記入)</p>\n<h1>ご質問やご要望があればご記入ください</h1>\n<p>(無記入)</p>\n</blockquote>\n"}},"__N_SSG":true}