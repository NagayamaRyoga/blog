{"pageProps":{"article":{"slug":"2019-03-02-writing-thesis-in-markdown","title":"卒業論文をMarkdownで書く","publishedAt":"2019-03-02T00:00:00.000Z","tags":["Markdown","LaTeX","Pandoc"],"ogpImage":"https://nagayamaryoga.github.io/blog/images/2019-03-02-writing-thesis-in-markdown.png","bodyContent":"## はじめに\n\n卒業論文に限らず、論文や技術文書とLaTeXは切り離すことができません。\n\nしかしながら、TeXをそのまま書くのは面倒なので可能な限りMarkdownなどの軽量な文書形式で記述できると嬉しいですね。\n\nそこでMarkdownからLaTeXを経由してPDFを生成するポータブルな環境を構築しました。\n\nhttps://github.com/NagayamaRyoga/recipro\n\nこれの技術的な構成要素について簡単に説明します。\n\n## 構成要素\n\n### Pandoc\n\n[Pandoc](https://pandoc.org/)はWord、LaTeX、Markdownなどの異なる文書形式間を変換するためのアプリケーションです。\n上記のプロジェクトではこれに加え、ラベルなどの参照のためにPandocのプラグイン、[pandoc-crossref](http://lierdakil.github.io/pandoc-crossref/)を併用しています。\n\n### pLaTeX\n\nPandocは単独でpdfLaTeXやLuaLaTeXを使ったPDF出力機能を有していますが、pdfLaTeXは日本語に対応していません。\nまた、使用する文書テンプレートがLuaLaTeXでのビルドに対応していなかったため今回はMarkdownから一度TeXファイルに変換し、それをpLaTeXでビルドするようにしています。\n\n### Shellスクリプト\n\n句読点からドット・カンマへの置換などの単純な前処理にはShellスクリプトを利用しています。\n\nまた、CSV・TSV形式の表をそのまま文書内に埋め込めるようにそれらのファイルをTeX形式に変換するのにも、同じくShellスクリプトを利用しています。\n(表の埋め込みにははじめ `csvsimple` パッケージを使用していたのですが、自由度が低かったため変換された表ファイルを `\\input` で読み込むようにしました)\n\n### Makefile\n\nビルドプロセス全体の制御にはMakefileを利用しています。\n\n可読性に難があるものの、柔軟さや汎用性の高さ、環境構築のしやすさを鑑みてMakefileを採用しました。\n\n### textlint\n\n文書の校正、表記ゆれなどの自動チェックに[textlint](https://github.com/textlint/textlint)を活用しています。\nまた、precommitフックにtextlintを登録することで文章の誤りや誤字がリポジトリにコミットされる可能性を軽減しています。\n\n使用しているtextlintルールは[.textlintrc](https://github.com/NagayamaRyoga/recipro/blob/master/.textlintrc)を参照してください。\n\n### Docker\n\nDockerイメージを作成して環境差を吸収し、LaTeX環境の揃っていないマシンでも論文の執筆ができるようにしました。\n\n### CircleCI\n\nGitHubリポジトリへのpushをフックし、自動的にビルドと校正が走るようにしました。\nCIの結果はWebhookを通じてSlackに通知されます。\n\nまた、masterブランチにpushされた場合は[slackcat](http://slackcat.chat/)というアプリケーションのコマンドをCIから叩くことで、成果物のPDFを同じくSlackへ投げるようにしました。\n\nこれにより、複数の異なるPCはもちろんスマートフォンなどの端末からも常に最新のPDFファイルが参照できるようになったため、卒業論文提出直前には非常に役立ちました。\n\n## 結び\n\nMarkdownのみで論文が書けるようになりました。\n\nレポートなどを提出する際には以前からPandocやtextlintの利用していたのですが、今回はそれに加えてDockerイメージの作成、CIによる自動ビルドを試みました。\n\n効率化、自動化は論文自体の質の向上にもつながるため、これからもこのような試みを継続していきたいです。","bodyHtml":"<h2>はじめに</h2>\n<p>卒業論文に限らず、論文や技術文書とLaTeXは切り離すことができません。</p>\n<p>しかしながら、TeXをそのまま書くのは面倒なので可能な限りMarkdownなどの軽量な文書形式で記述できると嬉しいですね。</p>\n<p>そこでMarkdownからLaTeXを経由してPDFを生成するポータブルな環境を構築しました。</p>\n<p><a href=\"https://github.com/NagayamaRyoga/recipro\">https://github.com/NagayamaRyoga/recipro</a></p>\n<p>これの技術的な構成要素について簡単に説明します。</p>\n<h2>構成要素</h2>\n<h3>Pandoc</h3>\n<p><a href=\"https://pandoc.org/\">Pandoc</a>はWord、LaTeX、Markdownなどの異なる文書形式間を変換するためのアプリケーションです。\n上記のプロジェクトではこれに加え、ラベルなどの参照のためにPandocのプラグイン、<a href=\"http://lierdakil.github.io/pandoc-crossref/\">pandoc-crossref</a>を併用しています。</p>\n<h3>pLaTeX</h3>\n<p>Pandocは単独でpdfLaTeXやLuaLaTeXを使ったPDF出力機能を有していますが、pdfLaTeXは日本語に対応していません。\nまた、使用する文書テンプレートがLuaLaTeXでのビルドに対応していなかったため今回はMarkdownから一度TeXファイルに変換し、それをpLaTeXでビルドするようにしています。</p>\n<h3>Shellスクリプト</h3>\n<p>句読点からドット・カンマへの置換などの単純な前処理にはShellスクリプトを利用しています。</p>\n<p>また、CSV・TSV形式の表をそのまま文書内に埋め込めるようにそれらのファイルをTeX形式に変換するのにも、同じくShellスクリプトを利用しています。\n(表の埋め込みにははじめ <code>csvsimple</code> パッケージを使用していたのですが、自由度が低かったため変換された表ファイルを <code>\\input</code> で読み込むようにしました)</p>\n<h3>Makefile</h3>\n<p>ビルドプロセス全体の制御にはMakefileを利用しています。</p>\n<p>可読性に難があるものの、柔軟さや汎用性の高さ、環境構築のしやすさを鑑みてMakefileを採用しました。</p>\n<h3>textlint</h3>\n<p>文書の校正、表記ゆれなどの自動チェックに<a href=\"https://github.com/textlint/textlint\">textlint</a>を活用しています。\nまた、precommitフックにtextlintを登録することで文章の誤りや誤字がリポジトリにコミットされる可能性を軽減しています。</p>\n<p>使用しているtextlintルールは<a href=\"https://github.com/NagayamaRyoga/recipro/blob/master/.textlintrc\">.textlintrc</a>を参照してください。</p>\n<h3>Docker</h3>\n<p>Dockerイメージを作成して環境差を吸収し、LaTeX環境の揃っていないマシンでも論文の執筆ができるようにしました。</p>\n<h3>CircleCI</h3>\n<p>GitHubリポジトリへのpushをフックし、自動的にビルドと校正が走るようにしました。\nCIの結果はWebhookを通じてSlackに通知されます。</p>\n<p>また、masterブランチにpushされた場合は<a href=\"http://slackcat.chat/\">slackcat</a>というアプリケーションのコマンドをCIから叩くことで、成果物のPDFを同じくSlackへ投げるようにしました。</p>\n<p>これにより、複数の異なるPCはもちろんスマートフォンなどの端末からも常に最新のPDFファイルが参照できるようになったため、卒業論文提出直前には非常に役立ちました。</p>\n<h2>結び</h2>\n<p>Markdownのみで論文が書けるようになりました。</p>\n<p>レポートなどを提出する際には以前からPandocやtextlintの利用していたのですが、今回はそれに加えてDockerイメージの作成、CIによる自動ビルドを試みました。</p>\n<p>効率化、自動化は論文自体の質の向上にもつながるため、これからもこのような試みを継続していきたいです。</p>\n","preview":"はじめに\n\n卒業論文に限らず、論文や技術文書とLaTeXは切り離すことができません。\n\nしかしながら、TeXをそのまま書くのは面倒なので可能な限りMarkdownなどの軽量な文書形式で記述できると嬉しいですね。","sourceBase":"2019-03-02-writing-thesis-in-markdown.md"}},"__N_SSG":true}