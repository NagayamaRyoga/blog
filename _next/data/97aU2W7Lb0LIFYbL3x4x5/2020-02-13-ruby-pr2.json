{"pageProps":{"article":{"slug":"2020-02-13-ruby-pr2","title":"Ruby に Pull-Request がマージされた (2回目)","publishedAt":"2020-02-13T00:00:00.000Z","tags":[{"slug":"Ruby","name":"Ruby"}],"thumbnail":null,"ogpImage":"https://nagayamaryoga.github.io/blog/images/2020-02-13-ruby-pr2.png","externalUrl":null,"preview":"2020年1月12日に発行したチケットと、その実装である Pull-Request が2020年2月10日に ruby/ruby のtrunkにマージされました。\n\n以下、そのPRの内容などについて述べます。\n\n背景\n\nクックパッド株式会社の夏インターンシップに参加した際、InstructionSequence (ISeq) のバイナリ表現を改善しました。","sourceBase":"2020-02-13-ruby-pr2.md","bodyContent":"2020年1月12日に発行した[チケット](https://bugs.ruby-lang.org/issues/16505)と、その実装である [Pull-Request](https://github.com/ruby/ruby/pull/2835) が2020年2月10日に [ruby/ruby](https://github.com/ruby/ruby) のtrunkにマージされました。\n\n以下、そのPRの内容などについて述べます。\n\n## 背景\n\n[クックパッド株式会社の夏インターンシップに参加した際](https://nagayamaryoga.github.io/blog/2019-09-18-cookpad-summer-intern-ruby)、InstructionSequence (ISeq) のバイナリ表現を改善しました。\n上記チケットはその出力機能の速度改善に関するものです。\n\n## 問題点\n\nISeqのバイナリシリアライザは、内部で命令列やオブジェクトなどをバイナリ列に変換するのですが、\nその際に同一のオブジェクトが複数回 (無駄に) 出力されないよう、内部でオブジェクトの重複排除が行われています。\n\n既存の実装では、その重複排除はオブジェクトの格納された配列を線形探索することで実現されていました ([該当部分](https://github.com/ruby/ruby/pull/2835/files#diff-89f770b631618387d3b3f6da6eb38a6cL9683-L9685))。\nこの実装では、`.rb`ファイルに含まれるオブジェクトの数が多いほど (≒ `.rb`ファイルが大きいほど) バイナリの出力にかかる時間が増加します。\n\n実際に、Railsなどでも用いられている [mail gem](https://github.com/mikel/mail) は [Ragel](http://www.colm.net/open-source/ragel/) を用いて各種パーザを自動生成しているため、その内部にとても巨大な構文解析テーブルを複数持っています。\nもっとも巨大なものである [`address_lists_parser.rb`](https://github.com/mikel/mail/blob/master/lib/mail/parsers/address_lists_parser.rb) は数十万要素からなるテーブルによって構成されているため、それをバイナリに出力する際にはとてつもなく非効率的な操作が行われていたことになります。\n\n## 実装\n\n配列の線形探索ではなくハッシュテーブルを用いることで効率的に重複排除を行う変更を提案しました。\n\nまた、[@XrXr](https://github.com/XrXr) さんの指摘に基づいて、配列とハッシュテーブルの両方を用いていた実装を改め、\nハッシュテーブルのみを利用するように変更しました。\n\nパフォーマンスの変化などは上記チケットを参照してください。","bodyHtml":"<p>2020年1月12日に発行した<a href=\"https://bugs.ruby-lang.org/issues/16505\">チケット</a>と、その実装である <a href=\"https://github.com/ruby/ruby/pull/2835\">Pull-Request</a> が2020年2月10日に <a href=\"https://github.com/ruby/ruby\">ruby/ruby</a> のtrunkにマージされました。</p>\n<p>以下、そのPRの内容などについて述べます。</p>\n<h2>背景</h2>\n<p><a href=\"https://nagayamaryoga.github.io/blog/2019-09-18-cookpad-summer-intern-ruby\">クックパッド株式会社の夏インターンシップに参加した際</a>、InstructionSequence (ISeq) のバイナリ表現を改善しました。\n上記チケットはその出力機能の速度改善に関するものです。</p>\n<h2>問題点</h2>\n<p>ISeqのバイナリシリアライザは、内部で命令列やオブジェクトなどをバイナリ列に変換するのですが、\nその際に同一のオブジェクトが複数回 (無駄に) 出力されないよう、内部でオブジェクトの重複排除が行われています。</p>\n<p>既存の実装では、その重複排除はオブジェクトの格納された配列を線形探索することで実現されていました (<a href=\"https://github.com/ruby/ruby/pull/2835/files#diff-89f770b631618387d3b3f6da6eb38a6cL9683-L9685\">該当部分</a>)。\nこの実装では、<code>.rb</code>ファイルに含まれるオブジェクトの数が多いほど (≒ <code>.rb</code>ファイルが大きいほど) バイナリの出力にかかる時間が増加します。</p>\n<p>実際に、Railsなどでも用いられている <a href=\"https://github.com/mikel/mail\">mail gem</a> は <a href=\"http://www.colm.net/open-source/ragel/\">Ragel</a> を用いて各種パーザを自動生成しているため、その内部にとても巨大な構文解析テーブルを複数持っています。\nもっとも巨大なものである <a href=\"https://github.com/mikel/mail/blob/master/lib/mail/parsers/address_lists_parser.rb\"><code>address_lists_parser.rb</code></a> は数十万要素からなるテーブルによって構成されているため、それをバイナリに出力する際にはとてつもなく非効率的な操作が行われていたことになります。</p>\n<h2>実装</h2>\n<p>配列の線形探索ではなくハッシュテーブルを用いることで効率的に重複排除を行う変更を提案しました。</p>\n<p>また、<a href=\"https://github.com/XrXr\">@XrXr</a> さんの指摘に基づいて、配列とハッシュテーブルの両方を用いていた実装を改め、\nハッシュテーブルのみを利用するように変更しました。</p>\n<p>パフォーマンスの変化などは上記チケットを参照してください。</p>\n"}},"__N_SSG":true}